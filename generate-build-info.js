const { execSync } = require('child_process');
const fs = require('fs')
const path = require('path')

/**
 * 获取当前文件路径
 * 使用 ES Module 的 import.meta.url 获取当前模块的绝对路径
 */
const __rootdir = process.cwd()

/**
 * 安全执行 Git 命令，避免出错时直接崩溃
 * @param {string} command - Git 命令
 * @param {string} fallback - 出错时的默认返回值
 * @returns {string} 命令执行结果或默认值
 */
function exec(command, fallback = 'unknown') {
  try {
    return execSync(command).toString().trim()
  } catch (error) {
    console.warn(`Shell Command Failed: ${command}`, error.message)
    return fallback
  }
}

/**
 * 获取 Git 仓库信息
 * @returns {object} 包含 Git 和构建信息的对象
 */
function getGitInfo() {
  // 检查当前目录是否是 Git 仓库
  const isGitRepo = exec('git rev-parse --is-inside-work-tree', 'false') === 'true'

  if (!isGitRepo) {
    console.warn('当前目录不是 Git 仓库')
    return undefined
  }

  return {
    // 基础信息
    repository: exec('git remote get-url origin'),

    // 提交信息
    commit: {
      hash: exec('git rev-parse --short HEAD'),
      hashFull: exec('git rev-parse HEAD'),
      message: exec('git log -1 --pretty=%B'),
      summary: exec('git log -1 --pretty=%s'),  // 只获取摘要
      description: exec('git log -1 --pretty=%b'),  // 只获取描述（摘要后的内容）
      date: exec('git log -1 --pretty=%cd'),
      author: exec('git log -1 --pretty=%an'),
      authorEmail: exec('git log -1 --pretty=%ae'),
    },

    // 分支信息
    branch: exec('git rev-parse --abbrev-ref HEAD'),
    tag: exec('git describe --tags --always', 'none'),

  }
}


/**
 * 获取 Git 仓库信息
 * @returns {object} 包含 package.json 的各种信息
 */
function getProjectInfo() {
  try {
    const packageJsonPath = path.resolve(__rootdir, 'package.json');
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));

    return {
      name: packageJson.name,
      version: packageJson.version,
      dependencies: packageJson.dependencies || {},
      devDependencies: packageJson.devDependencies || {},
    };
  } catch (error) {
    console.error('Error reading package.json:', error);
    return {
      name: 'unknown',
      version: '0.0.0',
      dependencies: {},
      devDependencies: {},
    };
  }
}

const projectInfo = getProjectInfo();

const buildInfo = {
  git: getGitInfo(),

  // 构建信息
  buildDate: new Date().toISOString(),
  buildTimestamp: Date.now(),

  // 环境信息
  node: {
    version: process.version,
    project: {
      name: projectInfo.name,
      version: projectInfo.version
    }
  },

  // 依赖信息
  dependencies: projectInfo.dependencies,
  devDependencies: projectInfo.devDependencies,

  platform: process.platform
};

// 生成文件内容
const content = `/**
 * Automatically generated build information （。＾▽＾）
 *
 * This file is automatically generated by the \`generate-build-info.js\` script,
 * only used to provide build information for the project!
 * 
 * Script author: 白澪·洛丝塔亚(mio@chyan.moe)
 * 
 * File created on : ${new Date().toISOString()}
 */
export const buildInfo = ${JSON.stringify(buildInfo, null, 2)}`

// 写入文件
const outputPath = path.resolve(__rootdir, 'src/build-info.js')
fs.writeFileSync(outputPath, content)

console.log('构建信息已生成:', outputPath)